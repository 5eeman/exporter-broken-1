
{* Get page from context *}
{[ let page = context /]}

{* Get containing group. If the group represents tab, then use that group configuration to build header, and use its title as well. For non-tabbed pages, configuration is taken from the page object *}
{[ let group = page.parent /]}
{[ let groupIsTabContainer = (group.groupBehavior === "Tabs") /]}
{[ let configuration = (groupIsTabContainer ? group.configuration : page.configuration) /]}
{[ let headerConfiguration = configuration.header /]}

{* Title *}
{[ let title = (group.groupBehavior === "Tabs" ? group.title : page.title) /]}

{* Configure appropriate classes based on the configuration *}
{[ let centeredClass = (headerConfiguration.alignment === "Center" ? "centered" : "") /]}
{[ let flexedClass = (headerConfiguration.minHeight ? "flexed" : "") /]}
{[ let height = (headerConfiguration.minHeight ? headerConfiguration.minHeight.toString() + "px" : "auto") /]}

{* Background image overrides all settings *}
{[ if headerConfiguration.backgroundImageAssetUrl ]}
<div class="container-title {{ centeredClass }} {{ flexedClass }}" style="height: {{ height }}; background: url({{ headerConfiguration.backgroundImageAssetUrl }}) no-repeat center center; background-size: {{ headerConfiguration.backgroundImageScaleType === "AspectFill" ? "cover" : "contain" }};">
{* Background color takes over transparent default if provided *}
{[ elseif headerConfiguration.backgroundColor ]}
<div class="container-title {{ centeredClass }} {{ flexedClass }}" style="height: {{ height }}; background-color: {{ headerConfiguration.backgroundColor.value }};">
{* Default without any configuration *}
{[ else ]}
<div class="container-title {{ centeredClass }} {{ flexedClass }}" style="height: {{ height }};">
{[/]}
    {[ if headerConfiguration.showBackgroundOverlay ]}
        <div class="container-title-overlay"></div>
    {[/]}
    <div class="slider">
        {* Show title and description if enabled *}
        {[ if headerConfiguration.showCoverText ]}
        {[ let color = (headerConfiguration.foregroundColor ? headerConfiguration.foregroundColor.value : "") /]}
            <h1 style="{{ color ? "color: " + color : "" }}">{{ title }}</h1>
            {* Show description if provided *}
            {[ if headerConfiguration.description ]}
                <p class="subtitle" style="{{ color ? "color: " + color : "" }}">{{ headerConfiguration.description }}</p>
            {[/]}
        {[/]}
    </div>
</div>

{* Generate tabs if parent is group *}
{[ if groupIsTabContainer ]}
<div class="container-tabs">    
    <div class="tabbed-navigation">
        <ul class="nav nav-tabs" id="page-tab" role="tablist">
            {[ for tab in group.pages ]}
            <li class="nav-item">
                {[ let url = pageUrl(tab, ds.documentationDomain()) /]}
                <a class="nav-link {{ page.id === tab.id ? "active" : "" }}" id="tab-{{ tab.id }}" href="{{ url }}" role="tab" aria-controls="home" aria-selected="true">{{ tab.title }}</a>
            </li>
            {[/]}
        </ul>
    </div>
</div>
{[ else ]}
<div class="no-container-tabs"></div>
{[/]}