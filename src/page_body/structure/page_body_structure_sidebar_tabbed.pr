{* Fetch the page structure *}
{[ let rootGroup = [] /]}
{[ let page = context.page /]}
{[ let isRootForTab = false /]}

{[ if context.groupId.isString() ]}
    {* If we pass id of a group, we can request it directly *}
    {[ rootGroup = @ds.docs.groupById(context.groupId) /]}
{[ else ]}
    {* If we pass page object, it means we are generating from root. However, our root is actually not the main root, but rather one object below it - and we want to show its name as header of the category as well as all its children *}
    {[ rootGroup = @js.firstSubgroupOfPage(page) /]}
    {[ isRootForTab = true /]}
{[/]}

{[ if @compare.nonnull(rootGroup) ]}
    {[ if isRootForTab ]}
        <div class="nav-name">
            <span class="typographyDocsViewLabelCaps">{{ rootGroup.title.uppercased() }}</span>
        </div>
    {[/]}
    <ul class="nav flex-column ">
        {[ for item in rootGroup.children ]}
            {[ let isActive = @js.pageOrGroupActiveInContext(page, item) /]}
            {[ let activeClass = @boolean.ternaryValue(@compare.equals(isActive, true), "active", "") /]}
            {[ let itemId = item.id /]}
            {[ if item.type.equals("Page") ]}
                <li class="nav-item"><a class="nav-link typographyDocsViewNavigation {{ activeClass }}" href="{{ @js.pageUrl(item, @ds.docs.configuration().domain) }}"> {{ item.title }}</a><li>
            {[ else ]}
                <li class="nav-item">
                {[ let firstDescendingPage = @js.firstPageFromTop(item) /]}
                {* Group will either link to the first page, or be fully disabled *}
                {[ if @compare.nonnull(firstDescendingPage) ]}
                    <a class="nav-link typographyDocsViewNavigation group {{ activeClass }}" href="{{ @js.pageUrl(firstDescendingPage, @ds.docs.configuration().domain) }}"> {{ item.title }}</a>
                {[ else ]}  
                    <a class="nav-link typographyDocsViewNavigation group {{ activeClass }}"> {{ item.title }}</a>
                {[/]}
                {[ if isActive ]}
                    {[ let data = @init.dictionary().add("page", page).add("groupId", itemId) /]}
                    {[ inject "page_body_structure_sidebar_tabbed" context data /]}
                {[/]}
                </li>
            {[/]}
        {[/]}
    </ul>
{[ else ]}
    <div class="nav-name">
        <span class="typographyDocsViewLabelCaps">{{ context.page.title.uppercased() }}</span>
    </div>
{[/]}

<div class="nav-sn">
    <a href="https://supernova.io" target="_blank">
        {[ const domain = @ds.docs.configuration().domain /]}
        <img src="{{ @js.assetUrl("logos/powered-by-supernova.png", domain) }}" title="Supernova, the most advanced design system platform" alt="Supernova, the most advanced design system platform" />
    </a>
</div>