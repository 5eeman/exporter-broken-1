{* Get experimental block payload *}
{[ const block = context /]}

{* Ignore block if it doesn't have group id set *}
{[ if block.groupId ]}

{* Fetch all tokens of this specific group *}
{[ const groupId = block.groupId /]}
{[ let group = ds.tokenGroupById(groupId) /]}

{* If empty filter, show group (shows all), if not, show only group with full name *}
<div class="token-container">
    {* Show group header consisting of group segments and current group name *}
    <p class="token-group-header">{{ formattedTokenGroupHeader(group, true) }}</p>
    <table class="token-wrapper">
    {* Render all tokens *}
    {[ for token in ds.tokensByGroupId(group.id) ]}
    <tr class="color">
        <td>{[ inject "page_block_token_preview_small" context token /]}</td>
        <td>{{ token.name }}</td>
        <td>{{ token.description ? token.description : "No description" }}</td>
        <td>
        {[ inject "page_block_token_value" context token /]}       
        {[ for prop in token.properties ]}
            {[ if prop.type.equals("String") ]}
                {[ if prop.value ]}
                    <br /><span class="label">{{ prop.name }}</span>: <span class="custom-value">{{ prop.value.toString() }}</span>
                {[/]}
            {[ else ]}
                <br /><span class="label">{{ prop.name }}</span>: <span class="custom-value">{{ prop.value.toString() }}</span>
            {[/]}
        {[/]}
        </td>
    </tr>
    {[/]}
    </table>
</div>

{[/]}
