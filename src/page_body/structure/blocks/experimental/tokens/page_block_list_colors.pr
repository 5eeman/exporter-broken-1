{* Get experimental block payload *}
{[ const block = context /]}
{[ const possibleBlockName = block.payload /]}

{* Fetch all tokens of this specific group *}
{[ let groups = @ds.tokenGroupsOfType("Color") /]}

{* Iterate all groups *}
{[ for group in groups ]}
    {* Fetch all tokens of this specific group *}
    {[ let tokens = @ds.tokensByGroupId(group.id) /]}
    {* If empty, ignore group *}
    {[ log @js.fullTokenGroupName(group) /]}
    {[ if @boolean.and(@boolean.not(@compare.empty(tokens)), @compare.equals(possibleBlockName, @js.fullTokenGroupName(group))) ]}
    <div class="token-container">
        {* Show group header consisting of group segments and current group name *}
        <p class="token-group-header">{{ @js.formattedTokenGroupHeader(group, true) }}</p>
        <table class="token-wrapper">
        {* Render all tokens *}
        {[ for token in @ds.tokensByGroupId(group.id) ]}
        <tr class="color">
            <td><div class="token-preview-container" style="background-color: #{{ token.value.hex }};"></div></td>
            <td>{{ token.name }}</td>
            <td>#{{ token.value.hex.uppercased() }}</td>
            <td>{{ token.value.a.dividedBy(255).multipliedBy(100) }}%</td>
            <td>{{ @boolean.ternaryValue(@compare.greaterThan(token.description.count(), 0), token.description, "No description") }}</td>
        </tr>
        {[/]}
        </table>
    </div>
    {[/]}
{[/]}